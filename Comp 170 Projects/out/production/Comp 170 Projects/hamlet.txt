public class PhoneNumberStarter
{
    public static void main(String[] args)
    {
        /* Two parallel arrays to hold phone numbers and names
           ith name matches ith phone number; 0 indicates number unknown
           the L tag at the end of the numbers makes them a java long primitive type
           (necessary to fit 10 digits)
           You may extend these arrays but Do not modify the types
         */
        long[] numbers = {9876543210L, 0, 3129152000L, 9094567890L, 3034061234L, 0, 0, 8133774578L};
        String[] names = {"Adam Smith", "George Washington", "Alexander Hamilton", "Thomas Payne",
                "Betsy Ross", "Martha Washington", "Deborah Sampson", "Patience Wright"};

        //TODO: call the methods to test them. You can call them multiple times. Do some phone changes
        updateNumbers(numbers, names);
        showPhoneNumbers(numbers, names);
        }
        /**
         * Ask the user to update zero or more phone numbers using Scanner object. User enters name
         * of person, if that person found in people parameter, then allow update of corresponding phone number
         * in phoneNumber parameter.
         *
         * Loop asking for names for which to update the phone number until user enters *Done*
         *
         * @param phoneNumbers - array of phone numbers
         * @param people - array of people names
         * @return boolean true if any numbers were changed;false if no numbers were changed. successfully (for
         * 			example if user never enters a name found in people
         *
         * TODO: Enter the rest of your pseudo code here (give details on how you will process user requests,
         * search and make changes.
         * 1. Use a Scanner Object that takes input from System input (System.in)
         * 2. Take two boolean variables for tracking change, one "datachanged" tracks if any number is updated
         * it is update to true otherwise false, second "nameMatched" tracks if the current name maches with any
         * name.
         * 3. Using a while loop that runs infinitely and breaks if the user input is "DONE"
         * 4. In while loop if user enters a valid name( which we check by traversing through the name list
         * we ask for the new number to update the information.
         * 5. Whenever a valid name is entered and data is changed, boolean variable "dataChanged" is
         * update to true; and nameMatched is changed to true.
         * 6. If name entered is invalid, user is informed and again prompted for a new name unless they want to exit by
         * pressing "Done"
         * 7. In the end the variable dataChanged is returned to the user.
         */
        public static boolean updateNumbers(long[] phoneNumbers, String[] people) {
            // TODO write your code here
            Scanner input = new Scanner(System.in);
            String nameInput = "";
            boolean dataChanged = false; // to track
            boolean nameMatched;
            while(true)
            {
                System.out.println("Enter the name of the person you want to update: \nor enter *Done* to exit: ");
                nameInput = input.nextLine();
                nameMatched = false;
                if(nameInput.equals("Done"))
                {
                    break;
                }
                for(int i = 0;i<people.length;i++)
                {
                    if(nameInput.equals(people[i]))
                    {
                        nameMatched = true;
                        System.out.printf("Enter a new number for %s: \n",people[i]);
                        long prevNumber = phoneNumbers[i];
                        long number = input.nextLong();
                        phoneNumbers[i] = number;
                        if(phoneNumbers[i] != prevNumber)
                        {
                            dataChanged = true;
                            System.out.println("Number updated!");
                        }
                    }
                }
                if(!nameMatched)
                {
                    System.out.println("Entered name doesn't exist!!");
                }
            }
            return dataChanged;
        }
        /**
         * Show the full set of names and phone numbers in the format indicated in the assignment
         * (Display them to the console)
         *
         * @param phoneNumbers- array of phone numbers
         * @param people- array of people names
         *
         * TODO: Enter full psuedocode here (give details about how you will process the input parameters
         *             and how you will create the correct format. If helpful, mention key variables to use
         *
         * 1. Using a for loop traverse through each and every record.
         * 2. if corresponding phone number is 0, use string formatter to print the name and
         * phone number in the given format i.e (format = "|%20s|\t*Unknown*\t\t|\n").
         * 3. If the number if greater than 0 then, Convert the phone number to String and use the the inbuilt method substring to get
         * the required parts of the phone number. namely the "firstPart" is initial 3 digits,j
         * "secondPart" is next four digits and the "remaining" is remaining digits.
         * 4. using the format "|%20s|\t(%3s) %s-%s\t|\n"
         */
         public static void showPhoneNumbers(long[] phoneNumbers, String[] people)
         {
             // TODO: write your here
             // traverse the for loop for every phone number
             for (int i = 0; i < people.length; i++)
             {
                 if (phoneNumbers[i] == 0)
                 { // if number is zero
                     System.out.printf("|%20s|\t*Unknown*\t\t|\n",people[i]);
                     continue; // do not continue, move to next number
                 }
                 // divide the string into different parts
                 String number = Long.toString(phoneNumbers[i]);
                 String firstp = number.substring(0, 3);
                 String secondPart = number.substring(3, 7);
                 String remainging = number.substring(7);
                 System.out.printf("|%20s|\t(%3s) %s-%s\t|%n",people[i],firstp,secondPart,remainging);
             }
         }
}